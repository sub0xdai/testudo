# Dockerfile for Testudo Frontend (Leptos/WASM)
#
# This Dockerfile sets up a build environment for the Testudo frontend
# using Rust, WebAssembly (WASM), and Trunk.
#
# Purpose: To containerize the frontend build process and serve the static assets.
#
# TODO: Senior Implementation - Optimize multi-stage build for production.
# TODO: Senior Implementation - Add Nginx or other web server for serving.

# --- Build Stage ---
FROM rustlang/rust:latest-slim-bullseye AS builder

# Set working directory
WORKDIR /app

# Install Trunk and other build tools
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/*

# Install Trunk
RUN cargo install --locked trunk

# Install wasm-bindgen-cli
RUN cargo install wasm-bindgen-cli

# Copy frontend source code
COPY . .

# Build the frontend (Leptos/WASM)
# This will compile the Rust code to WASM and generate the necessary JS/HTML files.
# The --release flag optimizes the build for size and performance.
# TODO: Senior Implementation - Pass environment variables for build configuration.
RUN trunk build --release

# --- Serve Stage (Placeholder) ---
# TODO: Senior Implementation - Replace with a proper web server (e.g., Nginx, Caddy)
# to serve the static files generated by Trunk.
FROM debian:bullseye-slim AS runner

WORKDIR /usr/share/nginx/html

# Copy built assets from the builder stage
# TODO: Senior Implementation - Adjust path if Trunk's output directory changes.
COPY --from=builder /app/dist/ .

# Expose port 80 (default for web servers)
EXPOSE 80

# Placeholder command to keep the container running
CMD ["tail", "-f", "/dev/null"]
